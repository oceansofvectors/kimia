package main

import (
	"fmt"
)

func printHelp() {
	fmt.Println("Smithy – Kubernetes-Native OCI Builder")
	fmt.Println("Daemonless. Rootless. Privilege-free. Fully OCI-compliant.")
	fmt.Println()
	fmt.Println("USAGE:")
	fmt.Println("  smithy --context=<path|url> --destination=<image:tag> [options]")
	fmt.Println()
	fmt.Println("CORE OPTIONS:")
	fmt.Println("  -c, --context PATH                    Build context directory or Git URL")
	fmt.Println("  -f, --dockerfile PATH                 Path to Dockerfile (default: Dockerfile)")
	fmt.Println("  -d, --destination IMAGE               Destination image with tag (repeatable)")
	fmt.Println("  -t, --target STAGE                    Target stage in multi-stage Dockerfile")
	fmt.Println()
	fmt.Println("BUILD OPTIONS:")
	fmt.Println("  --build-arg KEY=VALUE                 Build-time variables (repeatable)")
	fmt.Println("  --label KEY=VALUE                     Image metadata labels (repeatable)")
	fmt.Println("  --no-push                             Build only, skip push")
	fmt.Println("  --cache                               Enable layer caching")
	fmt.Println("  --cache-dir PATH                      Cache directory path")
	fmt.Println("  --custom-platform PLATFORM            Target platform (e.g., linux/amd64)")
	fmt.Println()
	fmt.Println("GIT OPTIONS:")
	fmt.Println("  --git-branch BRANCH                   Git branch to checkout")
	fmt.Println("  --git-revision SHA                    Git commit SHA to checkout")
	fmt.Println("  --git-token-file PATH                 File containing Git token")
	fmt.Println("  --git-token-user USER                 Git auth username (default: oauth2)")
	fmt.Println()
	fmt.Println("REGISTRY OPTIONS:")
	fmt.Println("  --insecure                            Allow insecure connections")
	fmt.Println("  --insecure-registry REGISTRY          Specific insecure registry (repeatable)")
	fmt.Println("  --skip-tls-verify                     Skip TLS certificate verification")
	fmt.Println("  --push-retry N                        Push retry attempts (default: 1)")
	fmt.Println("  --registry-certificate PATH           Registry certificate directory")
	fmt.Println()
	fmt.Println("OUTPUT OPTIONS:")
	fmt.Println("  --tar-path PATH                       Export image to tar archive")
	fmt.Println("  --digest-file PATH                    Save image digest to file")
	fmt.Println("  --image-name-with-digest-file PATH    Save image name with digest")
	fmt.Println()
	fmt.Println("LOGGING:")
	fmt.Println("  -v, --verbosity LEVEL                 Log level: debug|info|warn|error")
	fmt.Println("  --log-timestamp                       Add timestamps to log output")
	fmt.Println()
	fmt.Println("OTHER:")
	fmt.Println("  --version                             Show version information")
	fmt.Println("  -h, --help                            Show this help message")
	fmt.Println()
	fmt.Println("EXAMPLES:")
	fmt.Println()
	fmt.Println("  # Build from local directory")
	fmt.Println("  smithy --context=. --destination=registry.io/myapp:latest")
	fmt.Println()
	fmt.Println("  # Build from Git repository")
	fmt.Println("  smithy --context=https://github.com/org/repo.git \\")
	fmt.Println("         --git-branch=main \\")
	fmt.Println("         --destination=registry.io/myapp:v1.0.0")
	fmt.Println()
	fmt.Println("  # Build with custom arguments and labels")
	fmt.Println("  smithy --context=. \\")
	fmt.Println("         --destination=registry.io/myapp:latest \\")
	fmt.Println("         --build-arg VERSION=1.0.0 \\")
	fmt.Println("         --label maintainer=team@company.com \\")
	fmt.Println("         --cache")
	fmt.Println()
	fmt.Println("  # Build for specific platform")
	fmt.Println("  smithy --context=. \\")
	fmt.Println("         --destination=registry.io/myapp:latest \\")
	fmt.Println("         --custom-platform=linux/arm64")
	fmt.Println()
	fmt.Println("SECURITY & COMPLIANCE:")
	fmt.Println("  • Daemonless     - No Docker/Podman daemon required")
	fmt.Println("  • Rootless       - Runs as non-root user (UID 1000)")
	fmt.Println("  • Privilege-free - No privileged mode or special permissions")
	fmt.Println("  • OCI-compliant  - Standards-based image building")
	fmt.Println("  • Minimal caps   - Only SETUID & SETGID capabilities")
	fmt.Println()
	printVersionInfo()
	fmt.Println()
	fmt.Println("For more information: https://github.com/rapidfort/smithy")
}

func printVersionInfo() {
	fmt.Printf("Version: %s | Built: %s | Commit: %s\n",
		Version,
		convertEpochStringToHumanReadable(BuildDate),
		CommitSHA)
}
