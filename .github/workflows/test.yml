name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - image_name: kimia
            dockerfile: Dockerfile.buildkit
            description: "Kimia (BuildKit)"
          - image_name: kimia-bud
            dockerfile: Dockerfile.buildah
            description: "Kimia-Bud (Buildah)"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.description }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ${{ matrix.image_name }}:test
          cache-from: type=gha,scope=${{ matrix.image_name }}-test
          cache-to: type=gha,mode=max,scope=${{ matrix.image_name }}-test

      - name: Test ${{ matrix.description }}
        run: |
          echo "🧪 Running smoke tests for ${{ matrix.image_name }}..."
          
          # Test --version flag
          echo "Testing --version..."
          docker run --rm ${{ matrix.image_name }}:test --version || echo "⚠️  --version not available"
          
          # Test --help flag
          echo "Testing --help..."
          docker run --rm ${{ matrix.image_name }}:test --help || echo "⚠️  --help not available"
          
          echo "✅ Basic tests passed for ${{ matrix.image_name }}"

      - name: Inspect ${{ matrix.description }}
        run: |
          echo "📦 Image details for ${{ matrix.image_name }}:"
          
          SIZE=$(docker image inspect ${{ matrix.image_name }}:test --format '{{.Size}}')
          SIZE_MB=$(echo "scale=2; $SIZE/1024/1024" | bc)
          echo "  Size: ${SIZE_MB} MB"
          
          ARCH=$(docker image inspect ${{ matrix.image_name }}:test --format '{{.Architecture}}')
          echo "  Architecture: ${ARCH}"
          
          OS=$(docker image inspect ${{ matrix.image_name }}:test --format '{{.Os}}')
          echo "  OS: ${OS}"
          
          CREATED=$(docker image inspect ${{ matrix.image_name }}:test --format '{{.Created}}')
          echo "  Created: ${CREATED}"

      - name: Test build with arguments
        run: |
          echo "🧪 Testing build with custom arguments..."
          docker run --rm \
            --cap-drop ALL \
            --cap-add SETUID \
            --cap-add SETGID \
            --security-opt seccomp=unconfined \
            --security-opt apparmor=unconfined \
            ${{ matrix.image_name }}:test \
            --context=/workspace --no-push 2>&1 | head -20 || echo "⚠️  Build test requires full setup"

  # Test both images in Kubernetes
  kubernetes-test:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        include:
          - image_name: kimia
            dockerfile: Dockerfile.buildkit
          - image_name: kimia-bud
            dockerfile: Dockerfile.buildah
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create k8s cluster with kind
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: kimia-test
          wait: 60s

      - name: Build and load ${{ matrix.image_name }} to kind
        run: |
          echo "🏗️  Building ${{ matrix.image_name }}..."
          docker build -f ${{ matrix.dockerfile }} -t ${{ matrix.image_name }}:test .
          
          echo "📦 Loading ${{ matrix.image_name }} into kind cluster..."
          kind load docker-image ${{ matrix.image_name }}:test --name kimia-test
          
          echo "✅ Image loaded successfully"

      - name: Run Kubernetes tests for ${{ matrix.image_name }}
        run: |
          echo "🧪 Running Kubernetes tests for ${{ matrix.image_name }}..."
          
          # Create test namespace
          kubectl create namespace ${{ matrix.image_name }}-test
          
          # Create basic test job
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${{ matrix.image_name }}-version-test
            namespace: ${{ matrix.image_name }}-test
          spec:
            template:
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  fsGroup: 1000
                containers:
                - name: ${{ matrix.image_name }}
                  image: ${{ matrix.image_name }}:test
                  imagePullPolicy: Never
                  command: ["sh", "-c", "${{ matrix.image_name }} --version || echo 'Version test complete'"]
                  securityContext:
                    allowPrivilegeEscalation: true
                    capabilities:
                      drop: [ALL]
                      add: [SETUID, SETGID]
                restartPolicy: Never
            backoffLimit: 1
          EOF
          
          # Wait for job completion
          echo "⏳ Waiting for job to complete..."
          kubectl wait --for=condition=complete job/${{ matrix.image_name }}-version-test \
            -n ${{ matrix.image_name }}-test --timeout=90s || \
            kubectl wait --for=condition=failed job/${{ matrix.image_name }}-version-test \
            -n ${{ matrix.image_name }}-test --timeout=10s
          
          # Check logs
          echo "📋 Job logs:"
          kubectl logs job/${{ matrix.image_name }}-version-test -n ${{ matrix.image_name }}-test || echo "No logs available"
          
          # Check job status
          JOB_STATUS=$(kubectl get job/${{ matrix.image_name }}-version-test -n ${{ matrix.image_name }}-test -o jsonpath='{.status.succeeded}')
          if [[ "$JOB_STATUS" == "1" ]]; then
            echo "✅ Kubernetes test passed for ${{ matrix.image_name }}!"
          else
            echo "❌ Kubernetes test failed for ${{ matrix.image_name }}"
            kubectl describe job/${{ matrix.image_name }}-version-test -n ${{ matrix.image_name }}-test
            exit 1
          fi

      - name: Test with sample build job
        run: |
          echo "🧪 Testing sample build scenario for ${{ matrix.image_name }}..."
          
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${{ matrix.image_name }}-build-test
            namespace: ${{ matrix.image_name }}-test
          spec:
            template:
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  fsGroup: 1000
                containers:
                - name: ${{ matrix.image_name }}
                  image: ${{ matrix.image_name }}:test
                  imagePullPolicy: Never
                  args:
                    - --help
                  securityContext:
                    allowPrivilegeEscalation: true
                    capabilities:
                      drop: [ALL]
                      add: [SETUID, SETGID]
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                restartPolicy: Never
            backoffLimit: 1
          EOF
          
          echo "⏳ Waiting for build test job..."
          kubectl wait --for=condition=complete job/${{ matrix.image_name }}-build-test \
            -n ${{ matrix.image_name }}-test --timeout=60s || \
            kubectl wait --for=condition=failed job/${{ matrix.image_name }}-build-test \
            -n ${{ matrix.image_name }}-test --timeout=10s
          
          echo "📋 Build test logs:"
          kubectl logs job/${{ matrix.image_name }}-build-test -n ${{ matrix.image_name }}-test || echo "No logs available"
          
          echo "✅ Build test complete for ${{ matrix.image_name }}"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          kubectl delete namespace ${{ matrix.image_name }}-test --ignore-not-found=true
          echo "✅ Cleanup complete"

  # Integration test summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [build-test, kubernetes-test]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          BUILD_STATUS="${{ needs.build-test.result }}"
          K8S_STATUS="${{ needs.kubernetes-test.result }}"
          
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$BUILD_STATUS" == "success" ]]; then
            echo "| Build Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$K8S_STATUS" == "success" ]]; then
            echo "| Kubernetes Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [[ "$K8S_STATUS" == "skipped" ]]; then
            echo "| Kubernetes Tests | ⏭️  Skipped (not a PR) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Kubernetes Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Tested" >> $GITHUB_STEP_SUMMARY
          echo "- **kimia** (BuildKit-based)" >> $GITHUB_STEP_SUMMARY
          echo "- **kimia-bud** (Buildah-based)" >> $GITHUB_STEP_SUMMARY
          
          # Fail if build tests failed
          if [[ "$BUILD_STATUS" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Build tests failed - please fix before merging**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
